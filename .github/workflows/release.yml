# Create a release from a given build run ID

name: Create Release from Build

on:
  workflow_dispatch:
    inputs:
      build-run-id:
        description: 'Github Run ID of build run of which to use artifacts'
        required: true

jobs:
  release_from_build:
    runs-on: windows-latest

    steps:
      - name: View context attributes
        uses: actions/github-script@v6
        with:
          script: console.log(context)
       
      # Get artifacts URL from given build run
      - name: Get list of build run artifacts
        id: get-artifacts
        uses: actions/github-script@v6
        env:
          MY_RUN_ID: ${{github.event.inputs.build-run-id}}
        with:
          script: |
            try {
              console.log("Retrieving list of artifacts")
              // Get list of artifacts for given run 
              const opts = github.rest.actions.listWorkflowRunArtifacts.endpoint.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: process.env.MY_RUN_ID.trim()
              })
              const artifacts = await github.paginate(opts)
              var distArtifacts = []
              for(const artifact of artifacts) {
                console.log("  Found: " + artifact.name)
                distArtifacts.push(artifact)
              }
              if (distArtifacts.length == 0) {
                throw "No artifacts found"
              }
              return distArtifacts
            } catch (error) {
              core.setFailed(error.message)
            }
            
      # Prepare release from given build run
      - name: Prepare release
        id: prepare-release
        shell: pwsh
        env: 
          ARTIFACTS: ${{steps.get-artifacts.outputs.result}}
        run: |
          # Download artifacts to "dist"
          $artifacts = ConvertFrom-Json $env:ARTIFACTS
          foreach($artifact in $artifacts) {
            echo "Downloading $($artifact.name)"
            & curl -L -o "$($artifact.name).zip" -H "Authorization: token ${{secrets.GITHUB_TOKEN}}" $artifact.archive_download_url
            & unzip "$($artifact.name).zip" -d "dist"
          }
          
          # Read release-info.json and make it available to workflow
          $releaseInfo = Get-Content "dist\release-info.json"
          echo "release-info=$releaseInfo" >> $env:GITHUB_OUTPUT
          
          # DEBUG
          dir dist

      # Create release from build info
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
            GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          tag: v${{fromJson(steps.prepare-release.outputs.release-info).package-version}} 
          name: "{fmt} Nuget Packages v${{fromJson(steps.prepare-release.outputs.release-info).package-version}}"
          commit: ${{fromJson(steps.prepare-release.outputs.release-info).github-commit-hash}}
          bodyFile: ./dist/RELEASE_NOTES.md
          artifacts: ./dist/*.nupkg,./dist/*.zip
          draft: true
          prerelease: true
          token: ${{secrets.GITHUB_TOKEN}}
